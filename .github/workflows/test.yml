name: Test

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  get-node-version:
    name: Get Node version
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.base.repo.id != github.event.head.repo.id)
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.get-node-version.outputs.node-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Check get-node-version version
        uses: ./.github/actions/get-node-version
        with:
          package-json: .github/actions/get-node-version/package.json
      - name: Get Node version
        id: get-node-version
        uses: ./.github/actions/get-node-version

  pre-commit:
    name: Code style check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install pre-commit
        run: curl https://pre-commit.com/install-local.py | python -
      - name: Run pre-commit
        run: ~/bin/pre-commit run --show-diff-on-failure --color=always --all-files

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker images
        run: IMAGE_TAG=${GITHUB_REF##*/} docker compose -f docker-compose.build.yml build --pull
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Push image to Docker Hub
        if: github.event_name != 'pull_request'
        run: IMAGE_TAG=${GITHUB_REF##*/} docker compose -f docker-compose.build.yml push

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: get-node-version
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node ${{ needs.get-node-version.outputs.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ needs.get-node-version.outputs.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-path
        run: echo "::set-output name=path::$(yarn cache dir)"
      - name: Cache Yarn cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-path.outputs.path }}
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-
      - name: Set fontawesome token
        run: |
          npm config set "@fortawesome:registry" https://npm.fontawesome.com/
          npm config set "//npm.fontawesome.com/:_authToken" ${{ secrets.NPM_FA_TOKEN }}
      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Build @thunderstore/hooks
        run: yarn workspace @thunderstore/hooks build
      - name: Build @thunderstore/components
        run: yarn workspace @thunderstore/components build
      - name: Test @thunderstore/dapper
        run: yarn workspace @thunderstore/dapper jest
      - name: Build @thunderstore/nextjs
        run: yarn workspace @thunderstore/nextjs build
      - name: Test @thunderstore/nextjs
        run: yarn workspace @thunderstore/nextjs jest

  deploy:
    name: Trigger deploy
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    strategy:
      matrix:
        app: [nextjs, sertra]
    steps:
      - name: Call deployment workflow
        run: |
          curl \
            -X POST \
            -u "${{ secrets.DEPLOY_WORKFLOW_DISPATCH_USER }}:${{ secrets.DEPLOY_WORKFLOW_DISPATCH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            ${{ secrets.DEPLOY_WORKFLOW_DISPATCH_URL }} \
            -d '{"ref": "master", "inputs": {"sourceOrg": "${{ github.repository_owner }}", "sourceRepo": "${{ github.event.repository.name }}", "appName": "${{ matrix.app }}", "environment": "dev"}}'
